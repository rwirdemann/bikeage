// Code generated by mockery v2.37.0. DO NOT EDIT.

package out

import (
	domain "github.com/rwirdemann/bikeage/application/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockSATResolver is an autogenerated mock type for the SATResolver type
type MockSATResolver struct {
	mock.Mock
}

type MockSATResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSATResolver) EXPECT() *MockSATResolver_Expecter {
	return &MockSATResolver_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: configuration
func (_m *MockSATResolver) Check(configuration domain.Configuration) bool {
	ret := _m.Called(configuration)

	var r0 bool
	if rf, ok := ret.Get(0).(func(domain.Configuration) bool); ok {
		r0 = rf(configuration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSATResolver_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockSATResolver_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - configuration domain.Configuration
func (_e *MockSATResolver_Expecter) Check(configuration interface{}) *MockSATResolver_Check_Call {
	return &MockSATResolver_Check_Call{Call: _e.mock.On("Check", configuration)}
}

func (_c *MockSATResolver_Check_Call) Run(run func(configuration domain.Configuration)) *MockSATResolver_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Configuration))
	})
	return _c
}

func (_c *MockSATResolver_Check_Call) Return(_a0 bool) *MockSATResolver_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSATResolver_Check_Call) RunAndReturn(run func(domain.Configuration) bool) *MockSATResolver_Check_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function with given fields: configuration
func (_m *MockSATResolver) Resolve(configuration domain.Configuration) []domain.Solution {
	ret := _m.Called(configuration)

	var r0 []domain.Solution
	if rf, ok := ret.Get(0).(func(domain.Configuration) []domain.Solution); ok {
		r0 = rf(configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Solution)
		}
	}

	return r0
}

// MockSATResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockSATResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - configuration domain.Configuration
func (_e *MockSATResolver_Expecter) Resolve(configuration interface{}) *MockSATResolver_Resolve_Call {
	return &MockSATResolver_Resolve_Call{Call: _e.mock.On("Resolve", configuration)}
}

func (_c *MockSATResolver_Resolve_Call) Run(run func(configuration domain.Configuration)) *MockSATResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Configuration))
	})
	return _c
}

func (_c *MockSATResolver_Resolve_Call) Return(_a0 []domain.Solution) *MockSATResolver_Resolve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSATResolver_Resolve_Call) RunAndReturn(run func(domain.Configuration) []domain.Solution) *MockSATResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSATResolver creates a new instance of MockSATResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSATResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSATResolver {
	mock := &MockSATResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
