// Code generated by mockery v2.37.0. DO NOT EDIT.

package out

import (
	domain "github.com/rwirdemann/bikeage/application/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockBikeRepository is an autogenerated mock type for the BikeRepository type
type MockBikeRepository struct {
	mock.Mock
}

type MockBikeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBikeRepository) EXPECT() *MockBikeRepository_Expecter {
	return &MockBikeRepository_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields:
func (_m *MockBikeRepository) GetAll() ([]domain.Configuration, error) {
	ret := _m.Called()

	var r0 []domain.Configuration
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Configuration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Configuration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Configuration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBikeRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockBikeRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockBikeRepository_Expecter) GetAll() *MockBikeRepository_GetAll_Call {
	return &MockBikeRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockBikeRepository_GetAll_Call) Run(run func()) *MockBikeRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBikeRepository_GetAll_Call) Return(_a0 []domain.Configuration, _a1 error) *MockBikeRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBikeRepository_GetAll_Call) RunAndReturn(run func() ([]domain.Configuration, error)) *MockBikeRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBikeRepository creates a new instance of MockBikeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBikeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBikeRepository {
	mock := &MockBikeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
